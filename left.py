# -*- coding: utf-8 -*-

# Module author: @ftgmodulesbyfl1yd
import asyncio
from .. import loader, utils


@loader.tds
class leftMod(loader.Module):
	"""–ü—Ä–æ—â–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ."""
	strings = {'name': 'Left'}

	async def client_ready(self, client, db):
		self.db = db
		self.client = client

	async def leftcmd(self, message):
		"""–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ü—Ä–æ—â–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ.
		–ò—Å–ø–æ–ª—å–∑—É–π: .left <clearall (–ø–æ –∂–µ–ª–∞–Ω–∏—é)>. """
		left = self.db.get("left", "left", {})
		chatid = str(message.chat_id)
		args = utils.get_args_raw(message)
		if args == "clearall":
			self.db.set("left", "left", {})
			return await message.edit("<b>[left Mode]</b> –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ "
			                          "–º–æ–¥—É–ª—è —Å–±—Ä–æ—à–µ–Ω—ã.")

		if chatid in left:
			left.pop(chatid)
			self.db.set("left", "left", left)
			return await message.edit("<b>[left Mode]</b> –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")

		left.setdefault(chatid, {})
		left[chatid].setdefault("message", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!")
		left[chatid].setdefault("is_reply", False)
		self.db.set("left", "left", left)
		await message.edit("<b>[left Mode]</b> –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
                await asyncio.sleep(5)
                await message.delete()
	async def setleftcmd(self, message):
		"""–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤
		—á–∞—Ç–µ.\n–ò—Å–ø–æ–ª—å–∑—É–π: .setleft <—Ç–µ–∫—Å—Ç (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {name}; {
		chat})>; –Ω–∏—á–µ–≥–æ. """
		left = self.db.get("left", "left", {})
		args = utils.get_args_raw(message)
		reply = await message.get_reply_message()
		chatid = str(message.chat_id)
		chat = await message.client.get_entity(int(chatid))
		try:
			if not args and not reply:
				return await message.edit(f'<b>–ü—Ä–æ—â–∞–Ω–∏–µ '
				                          f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ '
				                          f'"{chat.title}":</b>\n\n'
				                          f'<b>–°—Ç–∞—Ç—É—Å:</b> –í–∫–ª—é—á–µ–Ω–æ.\n'
				                          f'<b>–ø—Ä–æ—â–∞–Ω–∏–µ:</b> {left[chatid]["message"]}\n\n '
				                          f'<b>~ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ü—Ä–æ—â–∞–Ω–∏–µ '
				                          f'–º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:</b> '
				                          f'.setleft <—Ç–µ–∫—Å—Ç>.')
			else:
				if reply:
					left[chatid]["message"] = reply.id
					left[chatid]["is_reply"] = True
				else:
					left[chatid]["message"] = args
					left[chatid]["is_reply"] = False
				self.db.set("left", "left", left)
				return await message.edit("<b>–ù–æ–≤–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ "
				                          "—É—Å–ø–µ—à–Ω–æ!</b>")
		except KeyError:
			return await message.edit(
				f'<b>–ü—Ä–æ—â–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ "{chat.title}":</b>\n\n '
				f'<b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫–ª—é—á–µ–Ω–æ')

	async def watcher(self, message):
		"""–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø–æ—á–µ–º—É –æ–Ω –∏–º–µ–Ω–Ω–æ watcher –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è... ü§î"""
		try:
			left = self.db.get("left", "left", {})
			chatid = str(message.chat_id)
			if chatid not in left: return
			if message.user_left or message.user_deleted:
				user = await message.get_user()
				chat = await message.get_chat()
				if not left[chatid]["is_reply"]:
					return await message.reply(
						(left[chatid]["message"]).format(
							name=user.first_name, chat=chat.title))
				msg = await self.client.get_messages(int(chatid),
				                                     ids=left[chatid][
					                                     "message"])
				await message.reply(msg)
		except:
			pass
